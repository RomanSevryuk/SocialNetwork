{"version":3,"file":"static/js/996.4490dbcb.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/componets/Profile/ProfileInfo/ProfileInfo.module.css?6a76","componets/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","componets/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/componets/Profile/MyPosts.module.css?af9e","webpack://samurai-way/./src/componets/Profile/MyPosts/Post/Post.module.css?87d2","componets/Profile/MyPosts/Post/Post.tsx","componets/Profile/MyPosts.tsx","componets/Profile/MyPostsContainer.ts","componets/Profile/Profile.tsx","componets/Profile/ProfileClassContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__l104L\",\"avatar\":\"ProfileInfo_avatar__wa0Yd\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__P+olv\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    statusProp: string\r\n    updateUserStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({statusProp, updateUserStatusTC}: ProfileStatusWithHooksPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(statusProp)\r\n\r\n    useEffect(() => {\r\n        setStatus(statusProp)\r\n    }, [statusProp])\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatusTC(status)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode ?\r\n                <div><span onDoubleClick={activateEditMode}>{statusProp || '----------'}</span></div>\r\n                :\r\n                <div><input value={status} onChange={onStatusChange}\r\n                            onBlur={deactivateEditMode} autoFocus={true}/></div>}\r\n        </>\r\n    );\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport avatar from \"../../../assets/images/avatar.jpg\"\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (e: File) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateUserStatusTC, isOwner, savePhoto}: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files) {\r\n            savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.content}>\r\n                <img src='https://i.pinimg.com/originals/30/80/1c/30801c76ad257c29de8d2f28beabab38.jpg'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.avatar} src={profile?.photos.large || avatar}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks statusProp={status} updateUserStatusTC={updateUserStatusTC}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__yQF3l\",\"posts\":\"MyPosts_posts__CHs+4\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__i4ILF\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostTypeProps = {\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nexport const Post = (props: PostTypeProps) => {\r\n    return (\r\n        <div className='content'>\r\n            <div className={s.item}>\r\n                <img\r\n                    src='https://images.ctfassets.net/hrltx12pl8hq/qGOnNvgfJIe2MytFdIcTQ/429dd7e2cb176f93bf9b21a8f89edc77/Images.jpg'/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like {props.likeCounts}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./MyPosts/Post/Post\";\r\nimport {ProfilePageType} from \"../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} placeholder={'Enter your message for post'} component={Textarea}\r\n                       validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport const MyPosts = React.memo(({addPost, profilePage}: MyPostsType) => {\r\n    const postsElements = profilePage.posts.map(p => (\r\n        <Post key={p.id} message={p.message}\r\n              likeCounts={p.likeCounts}/>))\r\n    const onAddPost = (formData: FormDataType) => {\r\n        addPost(formData.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n","import {MyPosts} from \"./MyPosts\";\r\nimport {addPost, ProfilePageType} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type MapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => dispatch(addPost(newPostText)),\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (e: File) => void\r\n}\r\n\r\nexport const Profile = ({profile, status, updateUserStatusTC, isOwner, savePhoto}: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateUserStatusTC={updateUserStatusTC} isOwner={isOwner}\r\n                         savePhoto={savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {getProfileTC, getUserStatusTC, ProfileType, savePhoto, updateUserStatusTC} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ProfileClassPropsType = {\r\n    getProfileTC: (userID: string) => void\r\n    getUserStatusTC: (userID: string) => void\r\n    updateUserStatusTC: (status: string) => void\r\n    savePhoto: (e: File) => void\r\n} & MapStateToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: null | number\r\n    isAuth: boolean\r\n}\r\ntype PathParamsType = {\r\n    userID: string\r\n}\r\n\r\ntype ProfileClassContainerPropsType = RouteComponentProps<PathParamsType> & ProfileClassPropsType\r\n\r\n\r\nclass ProfileClassContainer extends React.Component<ProfileClassContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userID: string = this.props.match.params.userID\r\n        if (!userID) {\r\n            if (this.props.authorizedUserId)\r\n                userID = this.props.authorizedUserId.toString()\r\n        }\r\n        this.props.getProfileTC(userID)\r\n        this.props.getUserStatusTC(userID)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileClassContainerPropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n            this.refreshProfile()\r\n        }\r\n        if (this.props.profile?.photos.large !== prevProps.profile?.photos.large) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                        updateUserStatusTC={this.props.updateUserStatusTC} isOwner={!this.props.match.params.userID}\r\n                        savePhoto={this.props.savePhoto}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    getProfileTC,\r\n    getUserStatusTC,\r\n    updateUserStatusTC,\r\n    savePhoto,\r\n}), withRouter, withAuthRedirect)\r\n(ProfileClassContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}"],"names":["ProfileStatusWithHooks","statusProp","updateUserStatusTC","useState","editMode","setEditMode","status","setStatus","useEffect","value","onChange","e","currentTarget","onBlur","autoFocus","onDoubleClick","ProfileInfo","profile","isOwner","savePhoto","Preloader","className","s","src","photos","large","avatar","type","files","Post","props","message","likeCounts","maxLength10","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","placeholder","component","Textarea","validate","requiredField","MyPosts","React","addPost","postsElements","profilePage","posts","map","p","id","formData","newPostText","MyPostsContainer","connect","state","dispatch","Profile","ProfileClassContainer","userID","this","match","params","authorizedUserId","toString","getProfileTC","getUserStatusTC","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}