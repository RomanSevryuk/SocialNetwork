{"version":3,"file":"static/js/159.745cd61a.chunk.js","mappings":"mLACA,G,QAA0B,0BAA1B,EAA4D,wBAA5D,EAAmG,8BAAnG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCQpMA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,+BACH,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,YCNzBC,EAAU,SAACP,GACpB,OAAO,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMQ,W,uCCkCvCC,GAAcC,EAAAA,EAAAA,GAAiB,IAgB/BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAdsC,SAACZ,GAC/D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOV,KAAM,iBAAkBW,UAAWC,EAAAA,GAAUC,YAAa,oBAC1DC,SAAU,CAACC,EAAAA,EAAeZ,QAErC,0BACI,6C,8BCzBHa,GAAmBC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAXrC,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GAAD,OAA4BF,GAASG,EAAAA,EAAAA,GAAcD,SAGmCE,EAAAA,EAA3ER,EDTT,SAAC,GAA6C,IAA5CG,EAA2C,EAA3CA,YAAaE,EAA8B,EAA9BA,YAE5BI,EAAkBN,EAAYO,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACpC,EAAD,CAAuBO,KAAM6B,EAAE7B,KAAMJ,GAAIiC,EAAEjC,IAA1BiC,EAAEjC,OAClEkC,EAAmBV,EAAYW,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC/B,EAAD,CAAoBC,QAAS8B,EAAE9B,SAAjB8B,EAAEpC,OAMvE,OACI,4BACI,SAACS,EAAD,CAAqBG,SANP,SAACyB,GACnBX,EAAYW,EAASV,oBAMjB,iBAAK1B,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK4B,KAEL,gBAAK7B,UAAWC,EAAhB,SACKgC,c,iIE1BfI,EAAkB,SAACf,GACrB,MAAO,CACHgB,OAAQhB,EAAMiB,KAAKD,SAIpB,SAASV,EAAoBY,GAShC,OAFiCnB,EAAAA,EAAAA,IAAQgB,EAARhB,EANP,SAACxB,GACvB,IAAKyC,EAAwBzC,EAAxByC,OAAWG,GAAhB,OAA6B5C,EAA7B,GACA,OAAKyC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUvC,GAAI","sources":["webpack://samurai-way/./src/componets/Dialogs/Dialogs.module.css?887c","componets/Dialogs/DialogItem/DialogsItem.tsx","componets/Dialogs/Message/Message.tsx","componets/Dialogs/Dialogs.tsx","componets/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__qHII8\",\"dialog\":\"Dialogs_dialog__0G+mb\",\"dialogsItems\":\"Dialogs_dialogsItems__TFQJj\",\"active\":\"Dialogs_active__SjdS8\",\"messages\":\"Dialogs_messages__Jd7Bd\",\"message\":\"Dialogs_message__7-YVy\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemTypeProps = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemTypeProps) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return <>\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    </>\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessageTypeProps = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageTypeProps) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogsType = {\r\n    dialogsPage: DialogsPageType\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nexport const Dialogs = ({dialogsPage, sendMessage}: DialogsType) => {\r\n\r\n    const dialogsElements = dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    const messagesElements = dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        sendMessage(formData.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newMessageText'} component={Textarea} placeholder={'Enter yor message'}\r\n                       validate={[requiredField, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {DialogsPageType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => dispatch(sendMessageAC(newMessageText)),\r\n    }\r\n}\r\nexport const DialogsContainer = compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","DialogsContainer","compose","connect","state","dialogsPage","dispatch","sendMessage","newMessageText","sendMessageAC","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}