{"version":3,"file":"static/js/143.2f42c044.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/componets/Profile/ProfileInfo/ProfileInfo.module.css?6a76","componets/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","componets/Profile/ProfileInfo/ProfileDataForm.tsx","componets/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/componets/Profile/MyPosts.module.css?af9e","webpack://samurai-way/./src/componets/Profile/MyPosts/Post/Post.module.css?87d2","componets/Profile/MyPosts/Post/Post.tsx","componets/Profile/MyPosts.tsx","componets/Profile/MyPostsContainer.ts","componets/Profile/Profile.tsx","componets/Profile/ProfileClassContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__l104L\",\"avatar\":\"ProfileInfo_avatar__wa0Yd\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__P+olv\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    statusProp: string\r\n    updateUserStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({statusProp, updateUserStatusTC}: ProfileStatusWithHooksPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(statusProp)\r\n\r\n    useEffect(() => {\r\n        setStatus(statusProp)\r\n    }, [statusProp])\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatusTC(status)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode ?\r\n                <div><b>Status:</b> <span onDoubleClick={activateEditMode}>{statusProp || '----------'}</span></div>\r\n                :\r\n                <div><input value={status} onChange={onStatusChange}\r\n                            onBlur={deactivateEditMode} autoFocus={true}/></div>}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormDataType} from \"./ProfileInfo\";\r\nimport s from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType;\r\n};\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, ProfileDataFormType> & ProfileDataFormType> = ({\r\n                                                                                                                   handleSubmit,\r\n                                                                                                                   profile,\r\n                                                                                                                   error\r\n                                                                                                               }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {<div>\r\n                <button onClick={() => {\r\n                }}>save\r\n                </button>\r\n                {error && <div className={s.formSummaryError}> {error}</div>}\r\n            </div>}\r\n            <div>\r\n                <b>Full name:</b> {createField('Full name', Input, 'fullName', [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                {createField('Looking for a job:', Input, 'lookingForAJob', [], 'checkbox')}\r\n            </div>\r\n            <div>\r\n                <b>My professionals skills:</b>\r\n                {createField('My professionals skills:', Textarea, 'lookingForAJobDescription', [])}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                {createField('About me:', Textarea, 'aboutMe', [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div style={{paddingLeft: '10px'}} key={key}>\r\n                    <b>{key}: </b> {createField(key, Input, 'contacts.' + key, [])}\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<FormDataType, ProfileDataFormType>({form: 'editProfile'})(ProfileDataForm)\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ContactsProfileType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport avatar from \"../../../assets/images/avatar.jpg\"\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileDataReduxForm} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    status: string\r\n    updateUserStatusTC: (status: string) => void\r\n    savePhoto: (e: File) => void\r\n    saveProfile: (e: FormDataType) => Promise<any>\r\n} & ProfileDataType\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileType | null\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nexport type FormDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\nexport const ProfileInfo = ({\r\n                                profile,\r\n                                status,\r\n                                updateUserStatusTC,\r\n                                isOwner,\r\n                                savePhoto,\r\n                                saveProfile\r\n                            }: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files) {\r\n            savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.content}>\r\n                <img src='https://www.nicepng.com/png/full/5-53402_social-media-icons-blue-social-media-icons-png.png'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.avatar} src={profile?.photos.large || avatar}/>\r\n                <div>{isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}</div>\r\n                <br/>\r\n                <ProfileStatusWithHooks statusProp={status} updateUserStatusTC={updateUserStatusTC}/>\r\n                {editMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    return <>\r\n        {profile &&\r\n            <div>\r\n                <div>\r\n                    <b>Full name:</b> {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n                </div>\r\n                <div>\r\n                    <b>My professionals skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n                <div>\r\n                    <b>About me:</b> {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contacts key={key} contactTitle={key}\r\n                                     contactValue={profile.contacts[key as keyof ContactsProfileType]}/>\r\n                })}\r\n                    <br/>\r\n                </div>\r\n                {isOwner && <div>\r\n                    <button onClick={goToEditMode}>Edit profile</button>\r\n                </div>}\r\n            </div>\r\n        }\r\n    </>\r\n}\r\n\r\nexport const Contacts = ({contactTitle, contactValue}: ContactsPropsType) => {\r\n    return <div style={{paddingLeft: '10px'}}><b>{contactTitle}:</b> {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__yQF3l\",\"posts\":\"MyPosts_posts__CHs+4\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__i4ILF\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostTypeProps = {\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nexport const Post = (props: PostTypeProps) => {\r\n    return (\r\n        <div className='content'>\r\n            <div className={s.item}>\r\n                <img\r\n                    src='https://images.ctfassets.net/hrltx12pl8hq/qGOnNvgfJIe2MytFdIcTQ/429dd7e2cb176f93bf9b21a8f89edc77/Images.jpg'/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like {props.likeCounts}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./MyPosts/Post/Post\";\r\nimport {ProfilePageType} from \"../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} placeholder={'Enter your message for post'} component={Textarea}\r\n                       validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport const MyPosts = React.memo(({addPost, profilePage}: MyPostsType) => {\r\n    const postsElements = profilePage.posts.map(p => (\r\n        <Post key={p.id} message={p.message}\r\n              likeCounts={p.likeCounts}/>))\r\n    const onAddPost = (formData: FormDataType) => {\r\n        addPost(formData.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n","import {MyPosts} from \"./MyPosts\";\r\nimport {addPost, ProfilePageType} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type MapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => dispatch(addPost(newPostText)),\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {FormDataType, ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (e: File) => void\r\n    saveProfile: (e: FormDataType) => Promise<any>\r\n}\r\n\r\nexport const Profile = ({profile, status, updateUserStatusTC, isOwner, savePhoto, saveProfile}: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateUserStatusTC={updateUserStatusTC} isOwner={isOwner}\r\n                         savePhoto={savePhoto} saveProfile={saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileTC,\r\n    getUserStatusTC,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateUserStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {FormDataType} from \"./ProfileInfo/ProfileInfo\";\r\n\r\ntype ProfileClassPropsType = {\r\n    getProfileTC: (userID: string) => void\r\n    getUserStatusTC: (userID: string) => void\r\n    updateUserStatusTC: (status: string) => void\r\n    savePhoto: (e: File) => void\r\n    saveProfile: (e: FormDataType) => Promise<any>\r\n} & MapStateToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: null | number\r\n    isAuth: boolean\r\n}\r\ntype PathParamsType = {\r\n    userID: string\r\n}\r\n\r\ntype ProfileClassContainerPropsType = RouteComponentProps<PathParamsType> & ProfileClassPropsType\r\n\r\n\r\nclass ProfileClassContainer extends React.Component<ProfileClassContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userID: string = this.props.match.params.userID\r\n        if (!userID) {\r\n            if (this.props.authorizedUserId)\r\n                userID = this.props.authorizedUserId.toString()\r\n        }\r\n        this.props.getProfileTC(userID)\r\n        this.props.getUserStatusTC(userID)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileClassContainerPropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n            this.refreshProfile()\r\n        }\r\n        if (this.props.profile?.photos.large !== prevProps.profile?.photos.large) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                        updateUserStatusTC={this.props.updateUserStatusTC} isOwner={!this.props.match.params.userID}\r\n                        savePhoto={this.props.savePhoto}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    getProfileTC,\r\n    getUserStatusTC,\r\n    updateUserStatusTC,\r\n    savePhoto,\r\n    saveProfile,\r\n}), withRouter, withAuthRedirect)\r\n(ProfileClassContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}"],"names":["ProfileStatusWithHooks","statusProp","updateUserStatusTC","useState","editMode","setEditMode","status","setStatus","useEffect","value","onChange","e","currentTarget","onBlur","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","className","s","createField","Input","Textarea","Object","keys","contacts","map","key","style","paddingLeft","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","src","photos","large","avatar","type","files","initialValues","formData","then","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contacts","contactTitle","contactValue","Post","props","message","likeCounts","maxLength10","maxLengthCreator","AddNewPostReduxForm","Field","name","placeholder","component","validate","requiredField","MyPosts","React","addPost","postsElements","profilePage","posts","p","id","newPostText","MyPostsContainer","connect","state","dispatch","Profile","ProfileClassContainer","userID","this","match","params","authorizedUserId","toString","getProfileTC","getUserStatusTC","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}